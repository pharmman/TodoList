{"version":3,"sources":["ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","props","useState","title","setTitle","error","setError","addTask","trim","id","tasks","map","t","key","className","isDone","type","onChange","e","changeTaskStatus","currentTarget","checked","onClick","removeTask","removeTodoList","value","onKeyPress","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskTitle","todoListID","newTask","todoList","find","tl","taskID","task","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c8206ad0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType, TaskType} from './App'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    filter: FilterValuesType\r\n    title: String,\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n    addTask: (taskTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport function ToDoList(props: PropsType) {\r\n\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addTask(title.trim(), props.id);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const onKeyPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const onSetAllFilterClick = () => props.changeFilter('all', props.id);\r\n    const onSetActiveFilterClick = () => props.changeFilter('active', props.id);\r\n    const onSetCompletedFilterClick = () => props.changeFilter('completed', props.id);\r\n    const deleteTodoList = () => props.removeTodoList(props.id);\r\n\r\n\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTask = () => props.removeTask(t.id, props.id);\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        };\r\n        return (\r\n            <li key={t.id} className={t.isDone ? 'is-done' : ''}><\r\n                input\r\n                type=\"checkbox\"\r\n                onChange={changeStatus}\r\n                checked={t.isDone}/>\r\n                <span>{t.title}</span>\r\n                <button onClick={removeTask}>X</button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>{props.title}<button onClick={deleteTodoList}>Delete</button></h3>\r\n                <div>\r\n                    <input value={title} onChange={onchangeTitleHandler}\r\n                           onKeyPress={onKeyPressEnterHandler}\r\n                           className={error ? 'error' : ''}\r\n                    />\r\n\r\n                    <button onClick={addTask}>+</button>\r\n                    {error && <div className={'error-message'}>{error}</div>}\r\n                </div>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n                <div>\r\n                    <button\r\n                        className={props.filter === 'all' ? 'active' : ''}\r\n                        onClick={onSetAllFilterClick}>All\r\n                    </button>\r\n                    <button\r\n                        className={props.filter === 'active' ? 'active' : ''}\r\n                        onClick={onSetActiveFilterClick}>Active\r\n                    </button>\r\n                    <button\r\n                        className={props.filter === 'completed' ? 'active' : ''}\r\n                        onClick={onSetCompletedFilterClick}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from './ToDoList';\r\nimport {v1} from 'uuid';\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\ntype TodoListType = {\r\n    id: string;\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n\r\n    /* const [tasks, setTasks] = useState<Array<TaskType>>(\r\n         [\r\n             {id: v1(), title: 'HTML&CSS', isDone: true},\r\n             {id: v1(), title: 'JS', isDone: true},\r\n             {id: v1(), title: 'ReactJS', isDone: false},\r\n             {id: v1(), title: 'RestAPI', isDone: false},\r\n             {id: v1(), title: 'GraphQL', isDone: false}\r\n         ],\r\n     )*/\r\n\r\n    const todoListID1 = v1();\r\n    const todoListID2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID2, title: 'What to buy', filter: 'active'}\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'Beer', isDone: true},\r\n            {id: v1(), title: 'Fish', isDone: false},\r\n        ]\r\n    })\r\n\r\n    function addTask(taskTitle: string, todoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title: taskTitle, isDone: false};\r\n        const todoList = tasks[todoListID];\r\n        tasks[todoListID] = [newTask, ...todoList];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todoList = tasks[todoListID];\r\n        tasks[todoListID] = todoList.filter(t => t.id !== taskID);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todoList = tasks[todoListID];\r\n        let task = todoList.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID));\r\n        delete tasks[todoListID];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map(tl => {\r\n                    let tasksForTodoList = tasks[tl.id];\r\n\r\n                    if (tl.filter === 'active') {\r\n                        tasksForTodoList = tasks[tl.id].filter(t => !t.isDone);\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForTodoList = tasks[tl.id].filter(t => t.isDone);\r\n                    }\r\n                    return (\r\n                        <ToDoList\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={tasksForTodoList}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}