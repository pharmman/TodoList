{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolistsAPI.ts","components/features/CommonActions/commonApplicationActions.ts","utils/error-utils.ts","components/features/Auth/selectors.ts","components/features/Auth/auth-reducer.ts","utils/redux-utils.ts","components/features/Auth/Login.tsx","components/features/Auth/index.tsx","components/features/TodolistsList/Todolist/todolist-reducer.ts","components/features/TodolistsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/features/TodolistsList/Todolist/Task/Task.tsx","components/features/TodolistsList/Todolist/ToDoList.tsx","components/features/TodolistsList/TodolistsList.tsx","components/features/TodolistsList/selectors.ts","components/features/TodolistsList/index.tsx","components/features/Application/selectors.ts","components/features/Application/application-reducer.ts","components/features/Application/index.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCodes","instance","axios","create","baseURL","withCredentials","headers","APITodolist","get","title","post","todolistId","delete","put","APITasks","id","data","taskId","authAPI","setAppStatus","createAction","appActions","setAppError","handleServerAppError","dispatch","messages","length","error","status","handleServerNetworkError","message","selectIsLoggedIn","state","auth","isLogged","login","createAsyncThunk","thunkAPI","a","res","resultCode","Success","rejectWithValue","errors","fieldsErrors","undefined","logout","params","asyncActions","slice","createSlice","name","initialState","reducers","setIsLogged","action","payload","extraReducers","builder","addCase","fulfilled","useAppDispatch","useDispatch","useActions","actions","useMemo","bindActionCreators","validate","values","password","Login","isLoggedIn","useSelector","formik","useFormik","initialValues","email","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","type","placeholder","getFieldProps","touched","style","color","label","FormControlLabel","control","Checkbox","Button","variant","authActions","authReducer","reducer","getTodolists","param","todolists","response","createTodolist","todolist","deleteTodolist","setTodolistEntityStatus","entityStatus","todoListID","changeTodolistTitle","newTitle","changeTodoListFilter","index","findIndex","tl","filter","map","t","unshift","splice","updateTaskTC","getState","currentTask","tasks","find","console","warn","apiModel","startDate","description","priority","deadline","model","getTasksTC","items","removeTaskTC","setTaskEntityStatus","createTaskTC","task","todolistsAsyncActions","forEach","todoListId","Object","keys","k","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Task","tasksActions","onChangeStatusHandler","useCallback","checked","Completed","New","onChangeTitleHandler","onRemoveTaskHandler","marginLeft","position","right","top","size","Delete","fontSize","ToDoList","demo","todolistActions","useEffect","tasksForTodoList","onSetAllFilterClick","onSetActiveFilterClick","onSetCompletedFilterClick","addTask","helper","thunk","localChangeTodoListTitle","currentTasks","className","Paper","elevation","padding","listStyle","opacity","callback","isSelected","FilterButton","children","margin","TodolistsList","todoLists","todolistsSelectors","authSelectors","addTodoList","spacing","flexWrap","overflowX","width","todolistAsyncActions","todolistsSlice","tasksAsyncActions","todoListReducer","tasksReducer","tasksSlice","selectStatus","app","selectIsInitialized","isInitialized","selectAppError","initializeApp","appReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Alert","ErrorSnackbar","appError","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","appAsyncActions","AppBar","Toolbar","height","LinearProgress","hidden","Container","fixed","exact","path","render","from","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.eb04f00d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Application is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {EntityStatusType} from '../components/features/TodolistsList/Todolist/todolist-reducer';\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    addedDate: string,\r\n    order: number,\r\n    title: string\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCodes {\r\n    Success = 0,\r\n    Error = 1,\r\n    Captcha = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus?: EntityStatusType\r\n}\r\nexport type ResponseTodolistType<T = {}> = {\r\n    data: T\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors: []\r\n}\r\nexport type GetTaskResponseType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type FieldsErrorsType = {\r\n    'field': string,\r\n    'error': string\r\n};\r\nexport type ResponseType<T = {}> = {\r\n    data: T,\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors?: Array<FieldsErrorsType>\r\n}\r\nexport type LoginRequestPayloadType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\nexport type UpdateTaskModelType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import axios from 'axios';\r\nimport {\r\n    GetTaskResponseType,\r\n    LoginRequestPayloadType,\r\n    ResponseTodolistType,\r\n    ResponseType,\r\n    TaskType,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from './types';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'ea1464d3-6693-4a83-9755-2421f1dd088c'\r\n    }\r\n})\r\n\r\n//api-s\r\nexport const APITodolist = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseTodolistType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseTodolistType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseTodolistType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\nexport const APITasks = {\r\n    getTasks(id: string) {\r\n        return instance.get<GetTaskResponseType>(`todo-lists/${id}/tasks`)\r\n    },\r\n    createTask(data: { id: string, title: string }) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${data.id}/tasks`, {title: data.title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, data: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>(`auth/me`)\r\n    },\r\n    login(data: LoginRequestPayloadType) {\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}","import {createAction} from '@reduxjs/toolkit';\r\nimport {AppErrorType, RequestStatusType} from '../Application/application-reducer';\r\n\r\n\r\nconst setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\nconst setAppError = createAction<{ error: AppErrorType }>('app/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppError,\r\n    setAppStatus\r\n}","import {Dispatch} from 'redux';\r\nimport {AxiosError} from 'axios';\r\nimport {appActions} from '../components/features/CommonActions/commonApplicationActions'\r\nimport {ResponseType} from '../api/types';\r\n\r\nconst {setAppStatus, setAppError} = appActions\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length > 0) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Failed'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: AxiosError, dispatch: Dispatch) => {\r\n    dispatch(setAppError(error.message ? {error: error.message} : {error: 'Some error occurred'}))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import {AppRootStateType} from '../../../utils/types';\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLogged;","import {authAPI} from '../../../api/todolistsAPI';\r\nimport {handleServerAppError} from '../../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {FieldsErrorsType, LoginRequestPayloadType, ResultCodes} from '../../../api/types';\r\nimport {appActions} from '../CommonActions/commonApplicationActions';\r\n\r\n\r\nexport const login = createAsyncThunk<undefined, LoginRequestPayloadType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldsErrorsType> }\r\n}>\r\n('auth/login', async (data, thunkAPI) => {\r\n    try {\r\n        let res = await authAPI.login(data)\r\n        if (res.data.resultCode === ResultCodes.Success) {\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError<{ userId: number }>(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerAppError(err, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (params, {dispatch, rejectWithValue}) => {\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await authAPI.logOut()\r\n        if (res.data.resultCode === ResultCodes.Success) {\r\n            dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (err) {\r\n        handleServerAppError(err, dispatch)\r\n        return rejectWithValue(err)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login, logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLogged: false\r\n    },\r\n    reducers: {\r\n        setIsLogged: (state, action: PayloadAction<{ isLogged: boolean }>) => {\r\n            state.isLogged = action.payload.isLogged\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLogged = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLogged = false\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n","import {ActionCreatorsMapObject, bindActionCreators} from 'redux';\r\nimport {useMemo} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {AppDispatchType} from './types';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n\r\n    return boundActions\r\n}","import React from 'react';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {login} from './auth-reducer';\r\nimport {useSelector} from 'react-redux';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from './selectors';\r\nimport {useAppDispatch} from '../../../utils/redux-utils';\r\n\r\ntype InitialValuesType = {\r\n    email?: string | null,\r\n    password?: string | null,\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormikValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nconst validate = (values: InitialValuesType) => {\r\n    const errors: InitialValuesType = {};\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 4) {\r\n        errors.password = 'Must be 4 characters or more';\r\n    }\r\n    return errors\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate,\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            const action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'} rel={'noopener noreferrer'}>here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                id=\"email\"\r\n                                type=\"email\"\r\n                                placeholder={'Email'}\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                            ) : null}\r\n\r\n                            <TextField label={'Password'} id=\"password\"\r\n                                       type=\"password\" {...formik.getFieldProps('password')} />\r\n                            {formik.touched.password && formik.errors.password ? (\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            ) : null}\r\n\r\n                            <FormControlLabel label={'Remember ME'} id=\"rememberMe\"\r\n                                              control={<Checkbox/>} {...formik.getFieldProps('rememberMe')} />\r\n                            <Button type=\"submit\" variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n\r\n    )\r\n}","import * as authSelectors from './selectors'\r\nimport {asyncActions, slice} from './auth-reducer'\r\nimport { Login } from './Login'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}","import {APITodolist} from '../../../../api/todolistsAPI';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../../utils/error-utils';\r\nimport {ThunkErrorType} from '../../../../utils/types';\r\nimport {appActions} from '../../CommonActions/commonApplicationActions';\r\nimport {ResultCodes, TodolistType} from '../../../../api/types';\r\nimport {authActions} from '../../Auth';\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type EntityStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: EntityStatusType\r\n}\r\n\r\nconst {setAppStatus, setAppError} = appActions\r\n\r\nconst getTodolists = createAsyncThunk('todolist/getTodolist',\r\n    async (param, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const res = await APITodolist.getTodolist()\r\n        try {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolists: res.data}\r\n        } catch (err) {\r\n            if (err.response.status === 401) {\r\n                dispatch(setAppError({error: 'Please Sign In'}))\r\n            } else {\r\n                dispatch(setAppError(err.message))\r\n            }\r\n            dispatch(setAppStatus({status: 'failed'}))\r\n            return rejectWithValue(err)\r\n        }\r\n    })\r\nconst createTodolist = createAsyncThunk<{ todolist: TodolistType }, string,\r\n    ThunkErrorType>('todolist/createTodolist',\r\n    async (title, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const res = await APITodolist.createTodolist(title)\r\n        try {\r\n            if (res.data.resultCode === ResultCodes.Success) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return ({todolist: res.data.data.item})\r\n            } else {\r\n                handleServerAppError<{}>(res.data, dispatch)\r\n                return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue({errors: [err.message], fieldsErrors: undefined})\r\n        }\r\n    })\r\nconst deleteTodolist = createAsyncThunk('todolist/deleteTodolist',\r\n    async (id: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        dispatch(setTodolistEntityStatus({entityStatus: 'loading', id}))\r\n        const res = await APITodolist.deleteTodolist(id)\r\n        try {\r\n            if (res.data.resultCode === ResultCodes.Success) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todoListID: id}\r\n            } else {\r\n                dispatch(setAppError({error: res.data.messages[0]}))\r\n                dispatch(setAppStatus({status: 'failed'}))\r\n                dispatch(setTodolistEntityStatus({entityStatus: 'failed', id}))\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (err) {\r\n            dispatch(setAppError(err.message))\r\n            dispatch(setAppStatus({status: 'failed'}))\r\n            dispatch(setTodolistEntityStatus({entityStatus: 'failed', id}))\r\n            return rejectWithValue(err)\r\n        }\r\n    })\r\nconst changeTodolistTitle = createAsyncThunk('todolist/changeTodolistTitle',\r\n    async (param: { id: string, newTitle: string }, {dispatch, rejectWithValue}) => {\r\n        const {id, newTitle} = param\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const res = await APITodolist.updateTodolist(id, newTitle)\r\n        try {\r\n            if (res.data.resultCode === ResultCodes.Success) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {id, title: newTitle}\r\n            } else {\r\n                handleServerAppError<{}>(res.data, dispatch)\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(err)\r\n        }\r\n    })\r\n\r\nexport const asyncActions = {\r\n    getTodolists,\r\n    createTodolist,\r\n    deleteTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\nexport const slice = createSlice({\r\n        name: 'todolist',\r\n        initialState: [] as Array<TodolistDomainType>,\r\n        reducers: {\r\n            changeTodoListFilter: (state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].filter = action.payload.filter\r\n            },\r\n            setTodolistEntityStatus: (state, action: PayloadAction<{ entityStatus: EntityStatusType, id: string }>) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            },\r\n        },\r\n        extraReducers: builder => {\r\n            builder.addCase(getTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(t => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            builder.addCase(createTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            builder.addCase(deleteTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n                state.splice(index, 1)\r\n            })\r\n            builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n            builder.addCase(authActions.logout.fulfilled, (state) => {\r\n                state.length = 0\r\n            })\r\n        }\r\n    }\r\n)\r\n\r\nexport const {\r\n    setTodolistEntityStatus,\r\n    changeTodoListFilter,\r\n} = slice.actions\r\n\r\n\r\n","import {asyncActions as todolistsAsyncActions, EntityStatusType} from './todolist-reducer';\r\nimport {APITasks} from '../../../../api/todolistsAPI';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {appActions} from '../../CommonActions/commonApplicationActions';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../../utils/error-utils';\r\nimport {AppRootStateType, ThunkErrorType} from '../../../../utils/types';\r\nimport {ResultCodes, TaskPriorities, TaskStatuses, TaskType} from '../../../../api/types';\r\nimport {authActions} from '../../Auth';\r\n\r\n//types\r\nexport type UpdateTaskDomainType = {\r\n    description?: string\r\n    title?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst {setAppError, setAppStatus} = appActions\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask',\r\n    async (params: { todolistId: string, taskId: string, model: UpdateTaskDomainType },\r\n           {dispatch, getState, rejectWithValue}) => {\r\n        const state = getState() as AppRootStateType\r\n        const currentTask = state.tasks[params.todolistId].find(t => t.id === params.taskId)\r\n        if (!currentTask) {\r\n            console.warn('Task for updating not found')\r\n            return rejectWithValue('Task for updating not found')\r\n        }\r\n        const apiModel = {\r\n            title: currentTask.title,\r\n            status: currentTask.status,\r\n            startDate: currentTask.startDate,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            deadline: currentTask.deadline,\r\n            ...params.model\r\n        };\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const res = await APITasks.updateTask(params.todolistId, params.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === ResultCodes.Success) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return params\r\n            } else {\r\n                handleServerAppError<{ item: TaskType }>(res.data, dispatch)\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    })\r\nexport const getTasksTC = createAsyncThunk('tasks/getTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await APITasks.getTasks(todolistId)\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {tasks: res.data.items, todolistId}\r\n    } catch (err) {\r\n        thunkAPI.dispatch(setAppError(err.message))\r\n        thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',\r\n    async (params: { todolistId: string, taskId: string }, thunkAPI) => {\r\n        const {todolistId, taskId} = params;\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        thunkAPI.dispatch(setTaskEntityStatus({\r\n            entityStatus: 'loading',\r\n            todolistId,\r\n            taskId\r\n        }))\r\n        try {\r\n            const res = await APITasks.deleteTask(todolistId, taskId)\r\n            if (res.data.resultCode === ResultCodes.Success) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                // thunkAPI.dispatch(removeTaskAC({taskId, todolistId}))\r\n                return {taskId: taskId, todolistId: todolistId}\r\n            } else {\r\n                thunkAPI.dispatch(setAppError({error: res.data.messages[0]}))\r\n                thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n                thunkAPI.dispatch(setTaskEntityStatus({\r\n                    entityStatus: 'failed',\r\n                    todolistId: todolistId,\r\n                    taskId: taskId\r\n                }))\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        } catch (err) {\r\n            thunkAPI.dispatch(setAppError({error: err.message}))\r\n            thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n            thunkAPI.dispatch(setTaskEntityStatus({entityStatus: 'failed', todolistId, taskId}))\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    })\r\nexport const createTaskTC = createAsyncThunk<{ task: TaskType }, { id: string, title: string },\r\n    ThunkErrorType>\r\n('tasks/createTask', async (params, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await APITasks.createTask({...params})\r\n    try {\r\n        if (res.data.resultCode === ResultCodes.Success) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {task: res.data.data.item}\r\n        } else {\r\n            handleServerAppError<{ item: TaskType }>(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [err.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    updateTaskTC,\r\n    getTasksTC,\r\n    removeTaskTC,\r\n    createTaskTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {todolist: []} as TasksStateType,\r\n    reducers: {\r\n        setTaskEntityStatus: (state, action: PayloadAction<{ entityStatus: EntityStatusType, todolistId: string, taskId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(todolistsAsyncActions.createTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(todolistsAsyncActions.deleteTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.todoListID]\r\n        });\r\n        builder.addCase(todolistsAsyncActions.getTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(t => {\r\n                state[t.id] = []\r\n            })\r\n        })\r\n        builder.addCase(getTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks.splice(index, 1)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, ((state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        }))\r\n        builder.addCase(createTaskTC.fulfilled, ((state, action) => {\r\n            const tasks = state[action.payload.task.todoListId]\r\n            tasks.unshift(action.payload.task)\r\n        }))\r\n        builder.addCase(authActions.logout.fulfilled, (state) => {\r\n          const keys = Object.keys(state)\r\n          keys.forEach(k => {\r\n              delete state[k]\r\n          })\r\n        })\r\n    }\r\n})\r\n\r\n\r\n//actions\r\nexport const {setTaskEntityStatus} = slice.actions\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {EntityStatusType} from '../features/TodolistsList/Todolist/todolist-reducer';\r\n\r\nexport type AddItemFormSubmitHelpersType = { setError: (error: string) => void, setTitle: (title: string) => void }\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelpersType) => void\r\n    entityStatus?: EntityStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onchangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(null)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const onKeyPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(null)\r\n            if (e.key === 'Enter') {\r\n                addItem()\r\n            }\r\n        }\r\n    }\r\n\r\n    const addItem = async () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       value={title}\r\n                       onChange={onchangeTitleHandler}\r\n                       onKeyPress={onKeyPressEnterHandler}\r\n                       error={!!error}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n                       disabled={props.entityStatus === 'loading'}\r\n            /> {\r\n            !error && <IconButton color={'primary'} onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        }\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport {EntityStatusType} from '../features/TodolistsList/Todolist/todolist-reducer';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title:string) => void\r\n    entityStatus?: EntityStatusType\r\n}\r\n\r\nexport const    EditableSpan = React.memo ( (props: EditableSpanPropsType) => {\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if(title.trim()) {\r\n            props.changeTitle(title.trim());\r\n        }\r\n    };\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState(props.title)\r\n    return (editMode ?\r\n            <TextField onBlur={offEditMode} onChange={onChangeTitle} autoFocus value={title}/>\r\n            :\r\n            <span onDoubleClick={props.entityStatus === 'loading'? () =>{} : onEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {EntityStatusType} from '../todolist-reducer';\r\nimport {tasksActions} from '../../index';\r\nimport {useActions} from '../../../../../utils/redux-utils';\r\nimport {TaskStatuses, TaskType} from '../../../../../api/types';\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    entityStatus?: EntityStatusType\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({\r\n                                                             task,\r\n                                                             entityStatus\r\n                                                         }) => {\r\n\r\n        const {updateTaskTC, removeTaskTC} = useActions(tasksActions)\r\n\r\n        const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => updateTaskTC({\r\n            todolistId: task.todoListId, taskId: task.id, model: e.currentTarget.checked ?\r\n                {status: TaskStatuses.Completed}\r\n                :\r\n                {status: TaskStatuses.New}\r\n        }), [updateTaskTC, task.id, task.todoListId])\r\n\r\n        const onChangeTitleHandler = useCallback((title: string) =>\r\n            updateTaskTC({\r\n                todolistId: task.todoListId,\r\n                taskId: task.id,\r\n                model: {title}\r\n            }), [task.id, updateTaskTC, task.todoListId])\r\n\r\n        const onRemoveTaskHandler = useCallback(() => removeTaskTC({\r\n            todolistId: task.todoListId,\r\n            taskId: task.id\r\n        }), [task.id, removeTaskTC, task.todoListId])\r\n\r\n        return (\r\n            <li style={{marginLeft: '0', position: 'relative'}}>\r\n                <Checkbox\r\n                    onChange={onChangeStatusHandler}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    color={'primary'}\r\n                />\r\n                <EditableSpan changeTitle={onChangeTitleHandler} title={task.title} entityStatus={entityStatus}/>\r\n                <IconButton style={{position: 'absolute', right:'0', top:'6px'}} size={'small'} onClick={onRemoveTaskHandler} color={'primary'} disabled={entityStatus === 'loading'}>\r\n                    <Delete fontSize={'small'}/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    }\r\n)\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm, AddItemFormSubmitHelpersType} from '../../../AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../EditableSpan/EditableSpan';\r\nimport {Button, IconButton, Paper} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useSelector} from 'react-redux';\r\nimport {Task} from './Task/Task';\r\nimport {TodolistDomainType} from './todolist-reducer';\r\nimport {tasksActions, todolistActions} from '../index';\r\nimport {useActions, useAppDispatch} from '../../../../utils/redux-utils';\r\nimport {AppRootStateType} from '../../../../utils/types';\r\nimport {TaskStatuses, TaskType} from '../../../../api/types';\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    demo: boolean | undefined\r\n}\r\n\r\nexport const ToDoList: React.FC<TodoListPropsType> = React.memo(({\r\n                                                                     todolist,\r\n                                                                     demo\r\n                                                                 }) => {\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todolist.id])\r\n    const {getTasksTC} = useActions(tasksActions)\r\n    const {changeTodoListFilter, deleteTodolist, changeTodolistTitle} = useActions(todolistActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        getTasksTC(todolist.id)\r\n    }, [demo, getTasksTC, todolist.id])\r\n\r\n    let tasksForTodoList: Array<TaskType> = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodoList = tasks.filter(t => t.status !== TaskStatuses.Completed);\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodoList = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const onSetAllFilterClick = useCallback(\r\n        () => changeTodoListFilter({filter: 'all', id: todolist.id}), [todolist.id, changeTodoListFilter]);\r\n    const onSetActiveFilterClick = useCallback(\r\n        () => changeTodoListFilter({filter: 'active', id: todolist.id}), [todolist.id, changeTodoListFilter]);\r\n    const onSetCompletedFilterClick = useCallback(\r\n        () => changeTodoListFilter({filter: 'completed', id: todolist.id}), [todolist.id, changeTodoListFilter]);\r\n\r\n    const removeTodoList = () => deleteTodolist(todolist.id);\r\n\r\n    const addTask = useCallback(async(title: string, helper: AddItemFormSubmitHelpersType) => {\r\n        const thunk = tasksActions.createTaskTC({id: todolist.id, title})\r\n        const action = await dispatch(thunk)\r\n\r\n        if (tasksActions.createTaskTC.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [todolist.id, dispatch])\r\n\r\n    const localChangeTodoListTitle = useCallback((title: string) => {\r\n        changeTodolistTitle({id: todolist.id, newTitle: title})\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n\r\n    let currentTasks = tasksForTodoList.map(t => {\r\n        return (\r\n            <span key={t.id}>\r\n                <Task entityStatus={t.entityStatus} task={t}/>\r\n            </span>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Paper elevation={3} style={{padding: '15px', position: 'relative'}}>\r\n                <h3><EditableSpan title={todolist.title} changeTitle={localChangeTodoListTitle}\r\n                                  entityStatus={todolist.entityStatus}/>\r\n                    <IconButton style={{position: 'absolute', top: '0', right: '0'}} onClick={removeTodoList}\r\n                                color={'primary'}\r\n                                disabled={todolist.entityStatus === 'loading'}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask} entityStatus={todolist.entityStatus}/>\r\n                <ul style={{listStyle: 'none', padding: '0'}}>\r\n                    {currentTasks}\r\n                    {tasksForTodoList.length === 0 && <span style={{opacity: '0.7', padding: '10px'}}>No tasks</span>}\r\n                </ul>\r\n                <div>\r\n                    <FilterButton callback={onSetAllFilterClick}\r\n                                  isSelected={todolist.filter === 'all'}>All</FilterButton>\r\n                    <FilterButton callback={onSetActiveFilterClick}\r\n                                  isSelected={todolist.filter === 'active'}>Active</FilterButton>\r\n                    <FilterButton callback={onSetCompletedFilterClick}\r\n                                  isSelected={todolist.filter === 'completed'}>Completed</FilterButton>\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FilterButtonPropsType = {\r\n    isSelected: boolean\r\n    callback: () => void\r\n}\r\n\r\nconst FilterButton: React.FC<FilterButtonPropsType> = ({callback, isSelected, children}) => {\r\n    return (\r\n        <Button\r\n            style={{margin: '3px'}}\r\n            variant={isSelected ? 'outlined' : 'contained'}\r\n            size={'small'}\r\n            color={'primary'}\r\n            onClick={callback}>{children}\r\n        </Button>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Grid} from '@material-ui/core';\r\nimport {AddItemForm, AddItemFormSubmitHelpersType} from '../../AddItemForm/AddItemForm';\r\nimport {ToDoList} from './Todolist/ToDoList';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {authSelectors} from '../Auth';\r\nimport {todolistActions, todolistsSelectors} from './index';\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils';\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo}) => {\r\n    const todoLists = useSelector(todolistsSelectors.todoLists)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {getTodolists} = useActions(todolistActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn || demo) {\r\n            return\r\n        }\r\n        getTodolists()\r\n    }, [isLoggedIn, demo, getTodolists])\r\n\r\n\r\n    const addTodoList = useCallback(async (title: string, helper: AddItemFormSubmitHelpersType) => {\r\n\r\n        const thunk = todolistActions.createTodolist(title)\r\n        const action = await dispatch(thunk)\r\n\r\n        if (todolistActions.createTodolist.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '15px'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={4} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    return (\r\n                        <Grid item key={tl.id}>\r\n                            <div style={{width: '300px'}}>\r\n                                <ToDoList\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import {AppRootStateType} from '../../../utils/types';\r\n\r\nexport const todoLists = (state:AppRootStateType) => state.todoLists","import {asyncActions as tasksAsyncActions} from './Todolist/tasks-reducer'\r\nimport {slice as todolistsSlice} from './Todolist/todolist-reducer'\r\nimport {slice as tasksSlice} from './Todolist/tasks-reducer'\r\nimport {asyncActions as todolistAsyncActions} from './Todolist/todolist-reducer'\r\nimport { TodolistsList } from './TodolistsList'\r\nimport * as todolistsSelectors from './selectors'\r\n\r\n\r\nconst todolistActions = {\r\n    ...todolistAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n}\r\n\r\nconst todoListReducer = todolistsSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistActions,\r\n    TodolistsList,\r\n    todoListReducer,\r\n    tasksReducer,\r\n    todolistsSelectors\r\n}","import {AppRootStateType} from '../../../utils/types';\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\nexport const selectAppError = (state: AppRootStateType) => state.app.error;\r\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {authAPI} from '../../../api/todolistsAPI';\r\nimport {handleServerAppError} from '../../../utils/error-utils';\r\nimport {authActions} from '../Auth';\r\nimport {ResultCodes} from '../../../api/types';\r\nimport {appActions} from '../CommonActions/commonApplicationActions';\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppErrorType = null | string\r\nexport type appReducerInitialState = typeof initialState\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as AppErrorType,\r\n    isInitialized: false as boolean,\r\n}\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (params, {dispatch, rejectWithValue}) => {\r\n    dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === ResultCodes.Success) {\r\n            dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            dispatch(authActions.setIsLogged({isLogged: true}))\r\n        } else {\r\n            dispatch(appActions.setAppStatus({status: 'failed'}))\r\n        }\r\n    } catch (err) {\r\n        handleServerAppError(err, dispatch)\r\n        return rejectWithValue(err)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n        builder.addCase(appActions.setAppStatus, (state, action) => {\r\n            state.status = action.payload.status\r\n        })\r\n        builder.addCase(appActions.setAppError, (state, action) => {\r\n            state.error = action.payload.error\r\n        })\r\n    }\r\n})\r\n\r\n","import * as appSelectors from './selectors'\r\nimport {asyncActions as appAsyncActions, slice as appSlice} from './application-reducer';\r\n\r\nconst appReducer = appSlice.reducer\r\n\r\nexport {\r\n    appSelectors,\r\n    appAsyncActions,\r\n    appReducer,\r\n\r\n}","import {tasksReducer, todoListReducer} from '../components/features/TodolistsList';\r\nimport {appReducer} from '../components/features/Application';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {authReducer} from '../components/features/Auth';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectAppError} from '../features/Application/selectors';\r\nimport {useActions} from '../../utils/redux-utils';\r\nimport {appActions} from '../features/CommonActions/commonApplicationActions';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const appError = useSelector(selectAppError)\r\n    const  {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAppError({error: null})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar open={appError !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {appError}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, LinearProgress, Toolbar} from '@material-ui/core';\r\nimport {TodolistsList} from '../components/features/TodolistsList';\r\nimport {useSelector} from 'react-redux';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from '../components/features/Auth';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {selectIsInitialized, selectStatus} from '../components/features/Application/selectors';\r\nimport {appAsyncActions} from '../components/features/Application';\r\nimport {useActions} from '../utils/redux-utils';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {initializeApp} = useActions(appAsyncActions)\r\n    const {logout} = useActions(authActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [initializeApp, demo])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logOutHandler = () => {\r\n        logout()\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\" className={'appBar'}>\r\n                <Toolbar>\r\n                    {isLoggedIn && <Button onClick={logOutHandler} color=\"inherit\">LogOut</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div style={{height: '4px'}}>\r\n                <LinearProgress className={'linearProgress'} hidden={status !== 'loading'}/>\r\n            </div>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <Redirect to={'/'}/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport App from './app/App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}